#!/usr/bin/env python3
"""
Simple Report Generator Component
=================================

A basic report generation component that creates simple summaries
and visualizations from processed data.

This component generates readable reports in various formats.
"""

import argparse
import pandas as pd
import json
from pathlib import Path
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_data_summary(df):
    """Create a basic data summary."""
    logger.info("Creating data summary")
    
    summary = {
        'overview': {
            'total_records': len(df),
            'total_columns': len(df.columns),
            'column_names': list(df.columns)
        },
        'statistics': {}
    }
    
    # Add statistics for numeric columns
    numeric_cols = df.select_dtypes(include=['number']).columns
    for col in numeric_cols:
        summary['statistics'][col] = {
            'mean': round(df[col].mean(), 2),
            'median': round(df[col].median(), 2),
            'min': round(df[col].min(), 2),
            'max': round(df[col].max(), 2),
            'std': round(df[col].std(), 2)
        }
    
    # Add value counts for categorical columns
    categorical_cols = df.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        top_values = df[col].value_counts().head(5)
        summary['statistics'][col] = {
            'unique_count': df[col].nunique(),
            'top_values': top_values.to_dict()
        }
    
    logger.info(f"Created summary for {len(numeric_cols)} numeric and {len(categorical_cols)} categorical columns")
    return summary

def generate_html_report(summary, output_path):
    """Generate an HTML report."""
    logger.info("Generating HTML report")
    
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>Data Analysis Report</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; }}
            h1, h2 {{ color: #333; }}
            table {{ border-collapse: collapse; width: 100%; margin: 20px 0; }}
            th, td {{ border: 1px solid #ddd; padding: 12px; text-align: left; }}
            th {{ background-color: #f2f2f2; }}
            .metric {{ background-color: #f9f9f9; padding: 10px; margin: 10px 0; border-left: 4px solid #007cba; }}
        </style>
    </head>
    <body>
        <h1>üìä Data Analysis Report</h1>
        <p>Generated on: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        
        <h2>Dataset Overview</h2>
        <div class="metric">
            <strong>Total Records:</strong> {summary['overview']['total_records']:,}
        </div>
        <div class="metric">
            <strong>Total Columns:</strong> {summary['overview']['total_columns']}
        </div>
        
        <h2>Column Statistics</h2>
        <table>
            <tr>
                <th>Column Name</th>
                <th>Type</th>
                <th>Key Statistics</th>
            </tr>
    """
    
    for col, stats in summary['statistics'].items():
        if 'mean' in stats:  # Numeric column
            stats_text = f"Mean: {stats['mean']}, Median: {stats['median']}, Std: {stats['std']}"
            col_type = "Numeric"
        else:  # Categorical column
            top_vals = list(stats['top_values'].keys())[:3]
            stats_text = f"Unique: {stats['unique_count']}, Top values: {', '.join(map(str, top_vals))}"
            col_type = "Categorical"
        
        html_content += f"""
            <tr>
                <td>{col}</td>
                <td>{col_type}</td>
                <td>{stats_text}</td>
            </tr>
        """
    
    html_content += """
        </table>
        
        <h2>Summary</h2>
        <p>This report provides a basic overview of your dataset. The data has been successfully processed through the pipeline.</p>
        
        <footer style="margin-top: 50px; color: #666; font-size: 12px;">
            Generated by PythonWorkflow Framework
        </footer>
    </body>
    </html>
    """
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    logger.info(f"HTML report saved to: {output_path}")

def generate_markdown_report(summary, output_path):
    """Generate a Markdown report."""
    logger.info("Generating Markdown report")
    
    md_content = f"""# üìä Data Analysis Report

Generated on: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}

## Dataset Overview

- **Total Records:** {summary['overview']['total_records']:,}
- **Total Columns:** {summary['overview']['total_columns']}

## Column Statistics

| Column Name | Type | Key Statistics |
|-------------|------|----------------|
"""
    
    for col, stats in summary['statistics'].items():
        if 'mean' in stats:  # Numeric column
            stats_text = f"Mean: {stats['mean']}, Median: {stats['median']}, Std: {stats['std']}"
            col_type = "Numeric"
        else:  # Categorical column
            top_vals = list(stats['top_values'].keys())[:3]
            stats_text = f"Unique: {stats['unique_count']}, Top values: {', '.join(map(str, top_vals))}"
            col_type = "Categorical"
        
        md_content += f"| {col} | {col_type} | {stats_text} |\n"
    
    md_content += f"""
## Summary

This report provides a basic overview of your dataset. The data has been successfully processed through the pipeline.

---
*Generated by PythonWorkflow Framework*
"""
    
    with open(output_path, 'w', encoding='utf-8') as f:
        f.write(md_content)
    
    logger.info(f"Markdown report saved to: {output_path}")

def main():
    parser = argparse.ArgumentParser(description='Simple Report Generation Component')
    parser.add_argument('--input-path', type=str, required=True, help='Path to input data file')
    parser.add_argument('--output-path', type=str, required=True, help='Path to save report')
    parser.add_argument('--format', type=str, choices=['html', 'markdown', 'json'], 
                       default='html', help='Report format')
    parser.add_argument('--title', type=str, default='Data Analysis Report', help='Report title')
    
    args = parser.parse_args()
    
    try:
        # Load data
        logger.info(f"Loading data from {args.input_path}")
        
        # Try to load as CSV first, then JSON
        try:
            df = pd.read_csv(args.input_path)
        except:
            with open(args.input_path, 'r') as f:
                data = json.load(f)
            df = pd.DataFrame(data)
        
        logger.info(f"Loaded data with shape: {df.shape}")
        
        # Create data summary
        summary = create_data_summary(df)
        
        # Generate report based on format
        output_path = Path(args.output_path)
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        if args.format == 'html':
            generate_html_report(summary, output_path)
        elif args.format == 'markdown':
            generate_markdown_report(summary, output_path)
        elif args.format == 'json':
            with open(output_path, 'w') as f:
                json.dump(summary, f, indent=2, default=str)
            logger.info(f"JSON report saved to: {output_path}")
        
        print(f"‚úÖ Report generated successfully!")
        print(f"üìÑ Format: {args.format.upper()}")
        print(f"üìÅ Location: {output_path}")
        
    except Exception as e:
        logger.error(f"Error generating report: {str(e)}")
        print(f"‚ùå Report generation failed: {str(e)}")
        raise

if __name__ == "__main__":
    main()
